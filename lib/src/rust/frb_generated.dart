// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/gc_free_screen_logic.dart';
import 'api/instant_free_screen_logic.dart';
import 'api/leaked_screen_logic.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.22';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  void gcFreeScreenLogicAllocateMemory(
      {required GcFreeScreenLogic that, dynamic hint});

  void gcFreeScreenLogicFree({required GcFreeScreenLogic that, dynamic hint});

  GcFreeScreenLogic gcFreeScreenLogicNew({dynamic hint});

  Future<void> gcFreeScreenLogicReceiveData(
      {required GcFreeScreenLogic that, dynamic hint});

  Stream<int> gcFreeScreenLogicSetSink(
      {required GcFreeScreenLogic that, dynamic hint});

  void instantFreeScreenLogicAllocateMemory(
      {required InstantFreeScreenLogic that, dynamic hint});

  InstantFreeScreenLogic instantFreeScreenLogicNew({dynamic hint});

  Future<void> instantFreeScreenLogicReceiveData(
      {required InstantFreeScreenLogic that, dynamic hint});

  Stream<int> instantFreeScreenLogicSetSink(
      {required InstantFreeScreenLogic that, dynamic hint});

  void leakedScreenLogicAllocateMemory(
      {required LeakedScreenLogic that, dynamic hint});

  LeakedScreenLogic leakedScreenLogicNew({dynamic hint});

  Future<void> leakedScreenLogicReceiveData(
      {required LeakedScreenLogic that, dynamic hint});

  Stream<int> leakedScreenLogicSetSink(
      {required LeakedScreenLogic that, dynamic hint});

  Stream<String> createLogStream({dynamic hint});

  String greet({required String name, dynamic hint});

  Future<void> initApp({dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GcFreeScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GcFreeScreenLogic;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_GcFreeScreenLogicPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InstantFreeScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InstantFreeScreenLogic;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_InstantFreeScreenLogicPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LeakedScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LeakedScreenLogic;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_LeakedScreenLogicPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  void gcFreeScreenLogicAllocateMemory(
      {required GcFreeScreenLogic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGcFreeScreenLogicAllocateMemoryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGcFreeScreenLogicAllocateMemoryConstMeta =>
      const TaskConstMeta(
        debugName: "GCFreeScreenLogic_allocate_memory",
        argNames: ["that"],
      );

  @override
  void gcFreeScreenLogicFree({required GcFreeScreenLogic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGcFreeScreenLogicFreeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGcFreeScreenLogicFreeConstMeta => const TaskConstMeta(
        debugName: "GCFreeScreenLogic_free",
        argNames: ["that"],
      );

  @override
  GcFreeScreenLogic gcFreeScreenLogicNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic,
        decodeErrorData: null,
      ),
      constMeta: kGcFreeScreenLogicNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGcFreeScreenLogicNewConstMeta => const TaskConstMeta(
        debugName: "GCFreeScreenLogic_new",
        argNames: [],
      );

  @override
  Future<void> gcFreeScreenLogicReceiveData(
      {required GcFreeScreenLogic that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGcFreeScreenLogicReceiveDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGcFreeScreenLogicReceiveDataConstMeta =>
      const TaskConstMeta(
        debugName: "GCFreeScreenLogic_receive_data",
        argNames: ["that"],
      );

  @override
  Stream<int> gcFreeScreenLogicSetSink(
      {required GcFreeScreenLogic that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kGcFreeScreenLogicSetSinkConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGcFreeScreenLogicSetSinkConstMeta => const TaskConstMeta(
        debugName: "GCFreeScreenLogic_set_sink",
        argNames: ["that"],
      );

  @override
  void instantFreeScreenLogicAllocateMemory(
      {required InstantFreeScreenLogic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInstantFreeScreenLogicAllocateMemoryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInstantFreeScreenLogicAllocateMemoryConstMeta =>
      const TaskConstMeta(
        debugName: "InstantFreeScreenLogic_allocate_memory",
        argNames: ["that"],
      );

  @override
  InstantFreeScreenLogic instantFreeScreenLogicNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic,
        decodeErrorData: null,
      ),
      constMeta: kInstantFreeScreenLogicNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInstantFreeScreenLogicNewConstMeta => const TaskConstMeta(
        debugName: "InstantFreeScreenLogic_new",
        argNames: [],
      );

  @override
  Future<void> instantFreeScreenLogicReceiveData(
      {required InstantFreeScreenLogic that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInstantFreeScreenLogicReceiveDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInstantFreeScreenLogicReceiveDataConstMeta =>
      const TaskConstMeta(
        debugName: "InstantFreeScreenLogic_receive_data",
        argNames: ["that"],
      );

  @override
  Stream<int> instantFreeScreenLogicSetSink(
      {required InstantFreeScreenLogic that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kInstantFreeScreenLogicSetSinkConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInstantFreeScreenLogicSetSinkConstMeta =>
      const TaskConstMeta(
        debugName: "InstantFreeScreenLogic_set_sink",
        argNames: ["that"],
      );

  @override
  void leakedScreenLogicAllocateMemory(
      {required LeakedScreenLogic that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLeakedScreenLogicAllocateMemoryConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLeakedScreenLogicAllocateMemoryConstMeta =>
      const TaskConstMeta(
        debugName: "LeakedScreenLogic_allocate_memory",
        argNames: ["that"],
      );

  @override
  LeakedScreenLogic leakedScreenLogicNew({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic,
        decodeErrorData: null,
      ),
      constMeta: kLeakedScreenLogicNewConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLeakedScreenLogicNewConstMeta => const TaskConstMeta(
        debugName: "LeakedScreenLogic_new",
        argNames: [],
      );

  @override
  Future<void> leakedScreenLogicReceiveData(
      {required LeakedScreenLogic that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLeakedScreenLogicReceiveDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLeakedScreenLogicReceiveDataConstMeta =>
      const TaskConstMeta(
        debugName: "LeakedScreenLogic_receive_data",
        argNames: ["that"],
      );

  @override
  Stream<int> leakedScreenLogicSetSink(
      {required LeakedScreenLogic that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kLeakedScreenLogicSetSinkConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLeakedScreenLogicSetSinkConstMeta => const TaskConstMeta(
        debugName: "LeakedScreenLogic_set_sink",
        argNames: ["that"],
      );

  @override
  Stream<String> createLogStream({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  @override
  String greet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GcFreeScreenLogic => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GcFreeScreenLogic => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_InstantFreeScreenLogic => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_InstantFreeScreenLogic => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_LeakedScreenLogic => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_LeakedScreenLogic => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic;

  @protected
  GcFreeScreenLogic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InstantFreeScreenLogic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InstantFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  LeakedScreenLogic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LeakedScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  GcFreeScreenLogic
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InstantFreeScreenLogic
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InstantFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  LeakedScreenLogic
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LeakedScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  GcFreeScreenLogic
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InstantFreeScreenLogic
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InstantFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  LeakedScreenLogic
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LeakedScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  GcFreeScreenLogic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GcFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  InstantFreeScreenLogic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InstantFreeScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  LeakedScreenLogic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LeakedScreenLogic.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  GcFreeScreenLogic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InstantFreeScreenLogic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InstantFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LeakedScreenLogic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LeakedScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GcFreeScreenLogic
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InstantFreeScreenLogic
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InstantFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LeakedScreenLogic
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LeakedScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GcFreeScreenLogic
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InstantFreeScreenLogic
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InstantFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LeakedScreenLogic
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LeakedScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GcFreeScreenLogic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GcFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  InstantFreeScreenLogic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InstantFreeScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  LeakedScreenLogic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LeakedScreenLogic.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          GcFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          InstantFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          LeakedScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          GcFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          InstantFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          LeakedScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          GcFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          InstantFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          LeakedScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockGCFreeScreenLogic(
          GcFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockInstantFreeScreenLogic(
          InstantFreeScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLeakedScreenLogic(
          LeakedScreenLogic self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
