// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<GCFreeScreenLogic>>
@sealed
class GcFreeScreenLogic extends RustOpaque {
  GcFreeScreenLogic.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  GcFreeScreenLogic.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GcFreeScreenLogic,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GcFreeScreenLogic,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_GcFreeScreenLogicPtr,
  );

  void allocateMemory({dynamic hint}) =>
      RustLib.instance.api.gcFreeScreenLogicAllocateMemory(
        that: this,
      );

  void free({dynamic hint}) => RustLib.instance.api.gcFreeScreenLogicFree(
        that: this,
      );

  static GcFreeScreenLogic newGCFreeScreenLogic({dynamic hint}) =>
      RustLib.instance.api.gcFreeScreenLogicNew(hint: hint);

  Future<void> receiveData({dynamic hint}) =>
      RustLib.instance.api.gcFreeScreenLogicReceiveData(
        that: this,
      );

  Stream<int> setSink({dynamic hint}) =>
      RustLib.instance.api.gcFreeScreenLogicSetSink(
        that: this,
      );
}
