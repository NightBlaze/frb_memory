// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.22.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<InstantFreeScreenLogic>>
@sealed
class InstantFreeScreenLogic extends RustOpaque {
  InstantFreeScreenLogic.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  InstantFreeScreenLogic.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_InstantFreeScreenLogic,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_InstantFreeScreenLogic,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_InstantFreeScreenLogicPtr,
  );

  void allocateMemory({dynamic hint}) =>
      RustLib.instance.api.instantFreeScreenLogicAllocateMemory(
        that: this,
      );

  static InstantFreeScreenLogic newInstantFreeScreenLogic({dynamic hint}) =>
      RustLib.instance.api.instantFreeScreenLogicNew(hint: hint);

  Future<void> receiveData({dynamic hint}) =>
      RustLib.instance.api.instantFreeScreenLogicReceiveData(
        that: this,
      );

  Stream<int> setSink({dynamic hint}) =>
      RustLib.instance.api.instantFreeScreenLogicSetSink(
        that: this,
      );
}
